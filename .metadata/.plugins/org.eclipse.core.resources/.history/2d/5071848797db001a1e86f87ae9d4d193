import java.util.ArrayList;
import java.util.Scanner;

public class Quest implements Cloneable {
	
	int testCase;
	
	int area;
	int areaEnemy[][];
		
	int speicalForce;		
	
	int max = 0;
	
	public void input() {
		Scanner	sc;		
		
		sc = new Scanner(System.in);
		
		testCase = sc.nextInt();
		
		area = sc.nextInt();
		speicalForce = sc.nextInt();
				
		areaEnemy = new int[2][area];
		
		for(int i = 0; i<2 ; i++) {
			
			for(int j = 0; j<area ; j++) {
				areaEnemy[i][j] = sc.nextInt();
			}			
		}
		
		System.out.println(testCase);
		System.out.println(area + " " + speicalForce);
		
		for(int i = 0; i<2 ; i++) {
			for(int j = 0; j<area ; j++) {
				System.out.print(areaEnemy[i][j] + " ");
			}			
			System.out.println(" ");
		}				
		System.out.println();
		sc.close();		
		//입력 완료	
		
		ArrayList<ArrayList<State>> tmps = new ArrayList<ArrayList<State>>();		
		ArrayList<State> stList = new ArrayList<State>();
		State st;
		
		for(int i = 0; i < area; i++) {
			int j = i+1;
			if(j == area) j = 0;
			
			ArrayList<State> tmp = stateCal(areaEnemy[0][i], areaEnemy[0][j], areaEnemy[1][j], areaEnemy[1][i]);
			tmps.add(tmp);
			
			System.out.printf("[%d 단계]\n", i);
			
			if(i == 0) {
				st = new State(0, 0);
				st.next = dpCal(st, tmp);
				stList.addAll(st.next);	
				continue;
			}
						
			ArrayList<State> stTmpList = new ArrayList<State>();
			for(State stTmp : stList) {
				stTmpList.addAll(dpCal(stTmp, tmp));
			}
			stList = stTmpList;
			
		}		
		
		System.out.println("Max: "+ max);
		System.out.printf("특수 소대 최소수 : %d", (area-max)*2 + max);
		
		
	}
	
	public ArrayList<State> dpCal(State st, ArrayList<State> s) {
			
		int val = st.val;
		int total = st.total;
		ArrayList<State> tmps = new ArrayList<State>();
		
		System.out.printf("pre     : %d\n", val);
		System.out.printf("preTotal: %d\n", total);
		
		
		if(val == 0) {					
			for(State tmp : s) {				
				State stateTmp = new State(tmp.val, tmp.total + total);
				tmps.add(stateTmp);
				if(max <stateTmp.total) max = stateTmp.total;
			}					
		}		
		
		else if(val == 1) {			
			for(State tmp : s) {	
				if(tmp.val == 0) {
					State stateTmp = new State(tmp.val, tmp.total + total);
					tmps.add(stateTmp);
					if(max <stateTmp.total) max = stateTmp.total;
				}
				else if(tmp.val == 2) {
					State stateTmp = new State(tmp.val, tmp.total + total);
					tmps.add(stateTmp);
					if(max <stateTmp.total) max = stateTmp.total;
				}
				else if(tmp.val == 3) {
					State stateTmp = new State(tmp.val, tmp.total + total);
					tmps.add(stateTmp);
					if(max <stateTmp.total) max = stateTmp.total;
				}
			}			
		}
		
		else if(val == 2) {
			for(State tmp : s) {				
				if(tmp.val == 0) {
					State stateTmp = new State(tmp.val, tmp.total + total);
					tmps.add(stateTmp);
					if(max <stateTmp.total) max = stateTmp.total;
				}
				else if(tmp.val == 2) {
					State stateTmp = new State(tmp.val, tmp.total + total);
					tmps.add(stateTmp);
					if(max <stateTmp.total) max = stateTmp.total;
				}
			}			
		}
		
		else if(val == 3) {
			for(State tmp : s) {				
				if(tmp.val == 0) {
					State stateTmp = new State(tmp.val, tmp.total + total);
					tmps.add(stateTmp);
					if(max <stateTmp.total) max = stateTmp.total;
				}
				else if(tmp.val == 1) {
					State stateTmp = new State(tmp.val, tmp.total + total);
					tmps.add(stateTmp);
					if(max <stateTmp.total) max = stateTmp.total;
				}
				else if(tmp.val == 2) {
					State stateTmp = new State(tmp.val, tmp.total + total);
					tmps.add(stateTmp);
					if(max <stateTmp.total) max = stateTmp.total;
				}
			}		
		}
		
		else if(val == 4) {	
			for(State tmp : s) {
				State stateTmp = new State(tmp.val, tmp.total + total);
				tmps.add(stateTmp);
				if(max <stateTmp.total) max = stateTmp.total;
			}
		}
		
		else if(val == 5) {
			
			for(State tmp : s) {				
				if(tmp.val == 0) {
					State stateTmp = new State(tmp.val, tmp.total + total);
					tmps.add(stateTmp);
					if(max <stateTmp.total) max = stateTmp.total;
				}
				else if(tmp.val == 1) {
					State stateTmp = new State(tmp.val, tmp.total + total);
					tmps.add(stateTmp);
					if(max <stateTmp.total) max = stateTmp.total;
				}
				else if(tmp.val == 2) {
					State stateTmp = new State(tmp.val, tmp.total + total);
					tmps.add(stateTmp);
					if(max <stateTmp.total) max = stateTmp.total;
				}
			}			
		}
		
		else if(val == 6) {
			
			for(State tmp : s) {				
				if(tmp.val == 0) {
					State stateTmp = new State(tmp.val, tmp.total + total);
					tmps.add(stateTmp);
					if(max <stateTmp.total) max = stateTmp.total;
				}
				else if(tmp.val == 1) {
					State stateTmp = new State(tmp.val, tmp.total + total);
					tmps.add(stateTmp);
					if(max <stateTmp.total) max = stateTmp.total;
				}
				else if(tmp.val == 2) {
					State stateTmp = new State(tmp.val, tmp.total + total);
					tmps.add(stateTmp);
					if(max <stateTmp.total) max = stateTmp.total;
				}
			}			
		}	
		
		System.out.printf("val     : ");
		for(State stTmp : tmps) {			
			System.out.printf("%d ", stTmp.val);			
		}
		System.out.println();
		System.out.printf("total   : ");
		for(State stTmp : tmps) {			
			System.out.printf("%d ", stTmp.total);			
		}
		System.out.println();
		System.out.println();
		
		return tmps;
		
	}
	


	public ArrayList<State> stateCal(int a, int b, int c, int d) {
		
		 /*
		 * 2구역 침투 경우의 수 
		 * s0 : 겹치는 경우가 없는 경우	1		0		-> 어차피 0이고 무조건 발생 가능하므로 반환필요 없을 것으로 보임
		 * s1 : 1 , 2			 	1		1	
		 * s2 : 2 , 3				1		2
		 * s3 : 3 , 4				1		3
		 * s4 : 4 , 1				1		4
		 * s5 : (1, 2), (3, 4)		2		5
		 * s6 : (4, 1), (2, 3)		2		6
		 */

		ArrayList<State> st = new ArrayList<State>();
		
		st.add(new State(0,0));								
		if(a+b<=100) st.add(new State(1,1));
		if(b+c<=100) st.add(new State(2,1));
		if(c+d<=100) st.add(new State(3,1));
		if(d+a<=100) st.add(new State(4,1));
		if((a+b<=100 && b+c<=100)) st.add(new State(5,2));
		if((b+c<=100 && d+a<=100)) st.add(new State(6,2));
				
		return st;
	}
	
}
