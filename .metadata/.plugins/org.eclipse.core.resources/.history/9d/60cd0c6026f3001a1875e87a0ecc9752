package programmers;

import java.util.Arrays;
import java.util.PriorityQueue;

public class diskController {
	public static void main(String[] args) {

		int jobs[][] = {{0,3},{1,9},{2,6}};

		new diskCtlSoultion().solution(jobs);
	}
}

class diskCtlSoultion{
	public int solution(int[][] jobs) {

		int answer =  jobs[0][1];
		int finExec = jobs[0][1];

		PriorityQueue<int[]> readyQu = new PriorityQueue<int[]>((a,b)->((a[1] - a[0]) - (b[1] - b[0])));
		PriorityQueue<int[]> waitQu = new PriorityQueue<int[]>((a,b)->(a[0] - b[0]));
		

		for(int i = 1 ; i < jobs.length; i++) {
			waitQu.add(jobs[i]);
		}


		while(!waitQu.isEmpty()) {

			int[] temp = null;
			System.out.println(Arrays.toString(waitQu.peek()));
			
			while(!waitQu.isEmpty() && waitQu.peek()[0] <= finExec) {
				temp = waitQu.poll();
				readyQu.add(temp);
			}
			
			if(!readyQu.isEmpty()) {

				int[] sTemp = readyQu.poll();
				System.out.printf("finExex: %d temp: %s\n", finExec, Arrays.toString(sTemp));
				
				int time = (finExec - sTemp[0] + sTemp[1]);
				System.out.printf("time: %d \n",time);
				answer += time;
				finExec += sTemp[1];
			}
			
		}
		System.out.println(answer);

		return answer;
	}


}
