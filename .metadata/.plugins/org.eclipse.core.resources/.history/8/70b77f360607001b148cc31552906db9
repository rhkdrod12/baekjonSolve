package programmersTest;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Deque;
import java.util.LinkedList;
import java.util.PriorityQueue;

public class Level3 {
	public static void main(String[] args) {

		int n = 5;
		int[][] results = { { 4, 3 }, { 4, 2 }, { 3, 2 }, { 1, 2 }, { 2, 5 } };

		System.out.println(new Level3Solution().solution(n, results));
	}
}

class Level3Solution {
	public int solution(int n, int[][] results) {
		int answer = 0;

		int[][] score = new int[n + 1][n + 1];

		for (int i = 0; i < results.length; i++) {
			score[results[i][0]][results[i][1]] = 1;
			score[results[i][1]][results[i][0]] = -1;
		}

		for (int i = 0; i < score.length; i++) {

			System.out.println(Arrays.toString(score[i]));

		}

		for (int i = 1; i <= n; i++) {
			boolean[] visited = new boolean[n+1];
			ArrayList<Integer> list = new ArrayList<Integer>();
			visited[i] = true;
			list.add(i);

			for (int j = 1; j <= n; j++) {
				if (!visited[j] && score[i][j] != 0) {
					visited[j] = true;
					list.add(j);
					cal(j, score[i][j], score, list, visited);
				}
			}
			
			if(list.size() == n) {
				answer++;
			}
		}
		
		
		return answer;
	}

	void cal(int num, int result, int[][] score, ArrayList<Integer> list, boolean[] visited) {

		for (int i = 1; i < score.length; i++) {
			if (!visited[i] && score[num][i] == result) {
				list.add(i);
				visited[i] = true;
				cal(num, result, score, list, visited);
			}
		}
	}
	
	public int solution2(int n, int[][] results) {

		int answer = 0;

		int[][] rel = new int[n + 1][n + 1];
	
		for (int i = 0; i < results.length; i++) {
			rel[results[i][0]][results[i][1]] = 1;
			rel[results[i][1]][results[i][0]] = -1;
		}
	
		for (int i = 1; i <= n; i++) {

			Deque<Integer> dq = new LinkedList<Integer>();
			boolean[] visited = new boolean[n + 1];

			dq.add(i);
			visited[i] = true;
			for (int j = 1; j <= n; j++) {
				if (!visited[j]) {
					if (rel[i][j] == 1) {
						visited[j] = true;
						dq.addLast(j);
						search(1, j, rel, visited, dq);

					} else if (rel[i][j] == -1) {
						visited[j] = true;
						dq.addFirst(j);
						search(-1, j, rel, visited, dq);
					}
				}
			}
			
			if(dq.size() == n) {
				answer++;
			}
		}

		return answer;
	}

	public void search(int winLose, int target, int[][] rel, boolean[] visited, Deque<Integer> dq) {
		
		for(int i = 1 ; i < rel.length ; i++) {
			if(!visited[i] && rel[target][i] == winLose) {
				visited[i] = true;
				if(winLose == 1) {
					dq.addLast(i);
					search(winLose, i, rel, visited, dq);
				}
				if(winLose == -1) {
					dq.addFirst(i);
					search(winLose, i, rel, visited, dq);
				}
			}
		}
	}
}
